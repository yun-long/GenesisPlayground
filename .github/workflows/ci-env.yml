name: CI - gs-env

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/env/**'
      - 'src/schemas/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/ci-env.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/env/**'
      - 'src/schemas/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/ci-env.yml'

env:
  UV_CACHE_DIR: ~/.cache/uv

jobs:
  # Lint and type check gs-env
  lint-and-typecheck:
    name: Lint and Type Check gs-env
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-env-${{ hashFiles('**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-env-
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: uv sync --dev

      - name: Run ruff linting on gs-env
        run: uv run ruff check src/env/

      - name: Run ruff formatting check on gs-env
        run: uv run ruff format --check src/env/

      - name: Run pyright type checking on gs-env
        run: |
          cd src/env
          uv run pyright

  # Test on multiple Python versions
  typecheck-matrix:
    name: Type Check Matrix (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-env-${{ matrix.python-version }}-${{ hashFiles('**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-env-${{ matrix.python-version }}-
            ${{ runner.os }}-uv-env-
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: uv sync --dev

      - name: Run pyright type checking on gs-env
        run: |
          cd src/env
          uv run pyright

  # Test on different platforms
  typecheck-platforms:
    name: Type Check on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-env-${{ hashFiles('**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-env-
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: uv sync --dev

      - name: Run pyright type checking on gs-env
        run: |
          cd src/env
          uv run pyright

  # Build and validate gs-env package
  build:
    name: Build gs-env
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, typecheck-matrix, typecheck-platforms]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-env-${{ hashFiles('**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-env-
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: uv sync --dev

      - name: Build gs-env package
        run: |
          cd src/env
          uv build

      - name: Validate package structure
        run: |
          # Check that built package exists
          ls -la src/env/dist/
          # Validate package metadata
          uv run python -c "
          import tomllib
          with open('src/env/pyproject.toml', 'rb') as f:
              config = tomllib.load(f)
          print('gs-env package config:', config['project']['name'])
          "

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gs-env-dist
          path: src/env/dist/
          retention-days: 7
