name: Python package

on:
  workflow_call:
    inputs:
      project-directory:   # e.g. "."
        required: true
        type: string
      package-directory:   # e.g. "src/schemas"
        required: true
        type: string
      package:             # one of: "gs-schemas" | "gs-env" | "gs-agent"
        required: true
        type: string
      runs-on:             # e.g. "ubuntu-24.04"
        required: true
        type: string

env:
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  UV_LINK_MODE: copy

jobs:
  lint-type-test:
    runs-on: ${{ inputs.runs-on }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      # Cache the venv in the project dir, plus uv’s wheels cache
      - name: Cache venv & uv wheels
        uses: actions/cache@v4
        with:
          path: |
            ${{ inputs.project-directory }}/.venv
            ~/.cache/uv
          key: >-
            ${{ runner.os }}-py312-${{ inputs.package }}-
            ${{ hashFiles('uv.lock', 'pyproject.toml', 'src/**/pyproject.toml') }}

      - name: Create venv in project directory
        run: uv --project "${{ inputs.project-directory }}" venv --python 3.12

      # Needed for editable (PEP 660) builds when using --no-build-isolation
      - name: Install build tools
        run: uv --project "${{ inputs.project-directory }}" pip install hatchling editables

      # Install local deps by PATH, staying on the project (root) so the same venv is used
      - name: Install package and local dependencies (editable, no isolation)
        shell: bash
        run: |
          set -eux
          proj="${{ inputs.project-directory }}"
          pkg="${{ inputs.package }}"
          pkg_dir="${{ inputs.package-directory }}"

          if [[ "$pkg" == "gs-schemas" ]]; then
            uv --project "$proj" pip install -e "$pkg_dir" --no-build-isolation
          elif [[ "$pkg" == "gs-env" ]]; then
            uv --project "$proj" pip install -e "src/schemas" --no-build-isolation
            uv --project "$proj" pip install -e "$pkg_dir"     --no-build-isolation
          elif [[ "$pkg" == "gs-agent" ]]; then
            uv --project "$proj" pip install -e "src/schemas" --no-build-isolation
            uv --project "$proj" pip install -e "src/env"     --no-build-isolation
            uv --project "$proj" pip install -e "$pkg_dir"    --no-build-isolation
          else
            echo "Unknown package: $pkg" >&2
            exit 2
          fi

      - name: Install dev tools
        run: uv --project "${{ inputs.project-directory }}" pip install pytest ruff pyright

      # Use module/uvx style so we never hit “Failed to spawn: ruff”
      - name: Ruff (lint)
        run: uv --project "${{ inputs.project-directory }}" run python -m ruff check "${{ inputs.package-directory }}" --output-format=github

      - name: Pyright (type check)
        run: uvx pyright -p "${{ inputs.package-directory }}"

      # Allow exit code 5 when no tests are found
      - name: Pytest
        run: uv --project "${{ inputs.project-directory }}" run python -m pytest -q "${{ inputs.package-directory }}" || ([ $? -eq 5 ] && exit 0)
