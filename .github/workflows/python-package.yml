# .github/workflows/python-package.yml
name: Python package

on:
  workflow_call:
    inputs:
      project-directory: { required: true, type: string }
      package-directory: { required: true, type: string }
      package: { required: true, type: string }
      runs-on: { required: true, type: string }

env:
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  UV_LINK_MODE: copy

jobs:
  lint-type-test:
    runs-on: ${{ inputs.runs-on }}
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v3

      - name: Cache venv & uv wheels
        uses: actions/cache@v4
        with:
          path: |
            ${{ inputs.project-directory }}/.venv
            ~/.cache/uv
          key: ${{ runner.os }}-py312-${{ inputs.package }}-${{ hashFiles('uv.lock','pyproject.toml','src/**/pyproject.toml') }}

      - name: Create venv
        run: uv --project "${{ inputs.project-directory }}" venv --python 3.12

      # âœ… Preinstall build backends/tools for editable & 3rd-party builds
      - name: Install build tools
        run: uv --project "${{ inputs.project-directory }}" pip install hatchling editables setuptools wheel

      - name: Install package + local deps (editable, no isolation)
        shell: bash
        run: |
          set -eux
          proj="${{ inputs.project-directory }}"
          pkg="${{ inputs.package }}"
          dir="${{ inputs.package-directory }}"
          if [[ "$pkg" == "gs-schemas" ]]; then
            uv --project "$proj" pip install -e "$dir"         --no-build-isolation
          elif [[ "$pkg" == "gs-env" ]]; then
            uv --project "$proj" pip install -e "src/schemas"  --no-build-isolation
            uv --project "$proj" pip install -e "$dir"         --no-build-isolation
          elif [[ "$pkg" == "gs-agent" ]]; then
            uv --project "$proj" pip install -e "src/schemas"  --no-build-isolation
            uv --project "$proj" pip install -e "src/env"      --no-build-isolation
            uv --project "$proj" pip install -e "$dir"         --no-build-isolation
          else
            echo "Unknown package: $pkg" >&2; exit 2
          fi

      - name: Install dev tools
        run: uv --project "${{ inputs.project-directory }}" pip install pytest ruff pyright

      - name: Ruff (lint)
        run: uvx ruff check "${{ inputs.package-directory }}" --output-format=github

      - name: Pyright (type check)
        run: uvx pyright -p "${{ inputs.package-directory }}"

      - name: Pytest
        run: |
          uv --project "${{ inputs.project-directory }}" run \
             --isolated --locked --package "${{ inputs.package }}" \
             python -m pytest -q "${{ inputs.package-directory }}" || ([ $? -eq 5 ] && exit 0)